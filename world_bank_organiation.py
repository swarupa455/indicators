# -*- coding: utf-8 -*-
"""world bank organiation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18dkEZB9bW07C1_A_DfsfQoMqfAyc2mmS

**Task-01**

**Create a bar chart or histogram to visualize the distribution of a categorical or continuous variable, such as the distribution of ages or genders in a population.**
"""

pip install pandas matplotlib seaborn

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset from the World Bank
# This URL might need to be updated if the dataset's location changes
df = pd.read_csv("/content/world.csv", skiprows=4)

# Display the first few rows of the dataframe to understand its structure
print("First few rows of the dataset:")
print(df.head())

# Display the last few rows of the dataframe to understand its structure
print("last rows of the dataset:")
print(df.tail())

df.shape

df.info()

# Check the columns to understand the available data
print("\nColumns in the dataset:")
print(df.columns)

# Check the years available in the dataset
available_years = df.columns[4:]
print("\nAvailable years for population data:")
print(available_years)

### Step 2: Data Preprocessing

# Let's choose the most recent year available in the dataset
# For demonstration, we will use 2021 if available
year = '2021'

# Check if the selected year is in the available years
if year not in available_years:
    raise ValueError(f"Year {year} is not available in the dataset. Please choose from the available years.")

# Select data for the specified year and drop rows with missing values
df_year = df[['Country Name', year]].dropna()

# Rename columns for clarity
df_year.columns = ['Country', 'Population']

# Display the first few rows of the year-specific dataframe
print(f"\nPopulation data for the year {year}:")
print(df_year.head())

# Check available years
available_years = df.columns[4:]
print(available_years)

# Select data for a specific year, e.g., 2021
year = '2021'
df_year = df[['Country Name', year]].dropna()

# Rename columns for clarity
df_year.columns = ['Country', 'Population']

# Display the first few rows of the year-specific dataframe
print(df_year.head())

# Step 3: Create the Visualization

# Sort the dataframe by population for better visualization
# Here, we focus on the top 20 countries by population
df_year_sorted = df_year.sort_values(by='Population', ascending=False).head(20)

# Create a bar chart showing the population distribution for the top 20 countries
plt.figure(figsize=(12, 8))
sns.barplot(data=df_year_sorted, x='Population', y='Country', palette='viridis')
plt.title(f'Top 20 Countries by Population in {year}')
plt.xlabel('Population')
plt.ylabel('Country')
plt.tight_layout()
plt.show()

### Additional Visualizations

# Population distribution histogram
plt.figure(figsize=(12, 8))
sns.histplot(df_year['Population'], bins=30, kde=True)
plt.title(f'Population Distribution in {year}')
plt.xlabel('Population')
plt.ylabel('Frequency')
plt.tight_layout()
plt.show()

# Boxplot to identify outliers in population data
plt.figure(figsize=(12, 8))
sns.boxplot(data=df_year['Population'])
plt.title(f'Boxplot of Population in {year}')
plt.xlabel('Population')
plt.tight_layout()
plt.show()

# Scatter plot for visualizing population data (if comparing with another year)
# Select data for another year, e.g., 2020
year2 = '2020'
if year2 in available_years:
    df_year2 = df[['Country Name', year2]].dropna()
    df_year2.columns = ['Country', 'Population_2020']

    # Merge data for comparison
    df_compare = pd.merge(df_year, df_year2, on='Country')

    # Scatter plot
    plt.figure(figsize=(12, 8))
    sns.scatterplot(data=df_compare, x='Population_2020', y='Population', hue='Country')
    plt.title(f'Population Comparison: {year2} vs {year}')
    plt.xlabel(f'Population in {year2}')
    plt.ylabel(f'Population in {year}')
    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.tight_layout()
    plt.show()
else:
    print(f"\nYear {year2} is not available for comparison.")

# Display descriptive statistics
print(f"\nDescriptive statistics for the population in {year}:")
print(df_year['Population'].describe())